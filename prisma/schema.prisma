generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String?    @unique
  mobile    String     @unique
  otp       Int?
  age       Int?
  dob       String?
  player    Player?
  userToken UserToken?
  Over      Over[]
  Ball      Ball[]
}

model UserToken {
  id     Int     @id @default(autoincrement())
  token  String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Player {
  id            Int             @id @default(autoincrement())
  bowlingStyle  String?
  battingStyle  String?
  imageUrl      String?
  wicketKeeper  Boolean?
  allrounder    Boolean?
  match         Match?          @relation("createdByPlayer")
  userId        Int             @unique
  user          User            @relation(fields: [userId], references: [id])
  statsId       Int             @unique
  stats         Stats           @relation(fields: [statsId], references: [id])
  teamAPlayers  Match[]         @relation("teamAPlayers")
  teamBPlayers  Match[]         @relation("teamBPlayers")
  teams         Team[]          @relation("PlayerTeams")
  battingSchema BattingSchema[]
  bowlingSchema BowlingSchema[]
}

model Stats {
  id           Int           @id @default(autoincrement())
  matches      Int           @default(0)
  player       Player?
  bowlStatsId  Int           @unique
  bowlingStats BowlingStats  @relation(fields: [bowlStatsId], references: [id])
  fieldStatsId Int           @unique
  fieldStats   FieldingStats @relation(fields: [fieldStatsId], references: [id])
  batStatsId   Int           @unique
  batStats     BattingStats  @relation(fields: [batStatsId], references: [id])
}

model BowlingStats {
  id         Int     @id @default(autoincrement())
  stats      Stats?
  matches    Int     @default(0)
  innings    Int     @default(0)
  wickets    Int     @default(0)
  totalBowls Int     @default(0)
  noBalls    Int     @default(0)
  wides      Int     @default(0)
  three_for  Int     @default(0)
  fifer      Int     @default(0)
  best       String?
}

model BattingStats {
  id          Int     @id @default(autoincrement())
  stats       Stats?
  matches     Int     @default(0)
  innings     Int     @default(0)
  ballsPlayed Int     @default(0)
  runs        Int     @default(0)
  notOuts     Int     @default(0)
  average     Decimal @default(0)
  strikeRate  Decimal @default(0)
  sixes       Int     @default(0)
  fours       Int     @default(0)
  ones        Int     @default(0)
  twos        Int     @default(0)
  threes      Int     @default(0)
}

model FieldingStats {
  id          Int    @id @default(autoincrement())
  stats       Stats?
  catches     Int    @default(0)
  mostCatches Int    @default(0)
  runOuts     Int    @default(0)
  mostRunOuts Int    @default(0)
  stump       Int    @default(0)
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String?       @unique
  imageUrl     String?
  matches      Match[]
  totalMatches Int           @default(0)
  wins         Int           @default(0)
  losses       Int           @default(0)
  draws        Int           @default(0)
  players      Player[]      @relation("PlayerTeams")
  tournaments  Tournament[]
  BattingTeam  BattingTeam[]
  BowlingTeam  BowlingTeam[]
}

model Match {
  id           Int      @id @default(autoincrement())
  state        String
  ground       String
  date         DateTime
  ballType     String
  bowlingLimit Int
  overs        Int
  createdById  Int      @unique
  player       Player   @relation("createdByPlayer", fields: [createdById], references: [id])
  teamAPlayers Player[] @relation("teamAPlayers")
  teamBPlayers Player[] @relation("teamBPlayers")
  teams        Team[]
}

model Innings {
  id           Int             @id @default(autoincrement())
  batting      BattingSchema[]
  bowling      BowlingSchema[]
  totalRuns    Int             @default(0)
  extras       Int             @default(0)
  totalWides   Int             @default(0)
  totalNoBalls Int             @default(0)
  bytes        Int             @default(0)
  oversPlayed  Int             @default(0)
}

model BattingTeam {
  id      Int             @id @default(autoincrement())
  teamId  Int
  team    Team            @relation(fields: [teamId], references: [id])
  batmens BattingSchema[]
}

model BowlingTeam {
  id      Int             @id @default(autoincrement())
  teamId  Int
  team    Team            @relation(fields: [teamId], references: [id])
  bowlers BowlingSchema[]
}

model BattingSchema {
  id            Int          @id @default(autoincrement())
  playerName    String?
  playerId      Int?
  player        Player?      @relation(fields: [playerId], references: [id])
  inningsId     Int?
  Innings       Innings?     @relation(fields: [inningsId], references: [id])
  runsScores    Int[]
  totalRuns     Int
  fours         Int
  sixes         Int
  isOut         Boolean      @default(false)
  BattingTeam   BattingTeam? @relation(fields: [battingTeamId], references: [id])
  battingTeamId Int?
}

model BowlingSchema {
  id            Int          @id @default(autoincrement())
  playerId      Int?
  player        Player?      @relation(fields: [playerId], references: [id])
  Innings       Innings?     @relation(fields: [inningsId], references: [id])
  inningsId     Int?
  oversBowled   Int          @default(0)
  order         Int          @default(0)
  over          Over[]
  isCompleted   Boolean      @default(false)
  BowlingTeam   BowlingTeam? @relation(fields: [bowlingTeamId], references: [id])
  bowlingTeamId Int?
  overLeft      Int
}

model Ball {
  id           Int     @id @default(autoincrement())
  isWide       Boolean @default(false)
  isNoBall     Boolean @default(false)
  isBye        Boolean @default(false)
  isWicket     Boolean @default(false)
  isRunOut     Boolean @default(false)
  runs         Int
  playedById   Int
  playedByUser User?   @relation(fields: [playedById], references: [id])
  order        Int
  Over         Over?   @relation(fields: [overId], references: [id])
  overId       Int?
}

model Over {
  id            Int            @id @default(autoincrement())
  bowlerId      Int?
  balls         Ball[]
  order         Int
  BowlingSchema BowlingSchema? @relation(fields: [bowlerId], references: [id])
  User          User?          @relation(fields: [userId], references: [id])
  userId        Int?
}

model Tournament {
  id    Int    @id @default(autoincrement())
  teams Team[]
}
